name: CI Pipeline

on:
  # Run on Pull Requests (for pre-merge validation)
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

  # Run on Push to main/develop (for post-merge validation)
  push:
    branches: [main, develop]

jobs:
  # Stage 1: Install Dependencies
  install-dependencies:
    name: 📦 Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup
        uses: ./.github/actions/setup
  # Stage 4: CodeQL Security Analysis
  codeql:
    name: 🔒 Security
    runs-on: ubuntu-latest
    needs: install-dependencies
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript'
          upload: true

      - name: 🔍 Check for Security Vulnerabilities
        run: |
          echo "Waiting for CodeQL results to be processed..."
          sleep 30

          # Get the latest code scanning alerts for this commit
          ALERTS=$(curl -s -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts?state=open&ref=${{ github.ref }}")

          # Count critical and high severity alerts
          CRITICAL_COUNT=$(echo "$ALERTS" | jq '[.[] | select(.rule.security_severity_level == "critical")] | length')
          HIGH_COUNT=$(echo "$ALERTS" | jq '[.[] | select(.rule.security_severity_level == "high")] | length')
          TOTAL_COUNT=$(echo "$ALERTS" | jq 'length')

          echo "🔍 Security Scan Results:"
          echo "📊 Total alerts: $TOTAL_COUNT"
          echo "🔴 Critical severity: $CRITICAL_COUNT"
          echo "🟠 High severity: $HIGH_COUNT"

          if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
            echo ""
            echo "❌ SECURITY FAILURE: Critical or high severity vulnerabilities detected!"
            echo "🚨 Found $CRITICAL_COUNT critical and $HIGH_COUNT high severity issues"
            echo "🔗 View details in Security tab: https://github.com/${{ github.repository }}/security/code-scanning"
            echo ""
            echo "Security issues found:"
            echo "$ALERTS" | jq -r '.[] | select(.rule.security_severity_level == "critical" or .rule.security_severity_level == "high") | "- \(.rule.name): \(.most_recent_instance.location.path):\(.most_recent_instance.location.start_line)"'
            exit 1
          else
            echo "✅ No critical or high severity vulnerabilities detected"
          fi

  # Stage 2: Linting
  linting:
    name: 🔍 Linting
    runs-on: ubuntu-latest
    needs: [install-dependencies, codeql]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup
        uses: ./.github/actions/setup

      - name: 🔍 Run ESLint
        run: npm run lint

  # Stage 3: Testing
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: [install-dependencies, codeql]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup
        uses: ./.github/actions/setup

      - name: 🧪 Run tests
        run: npm run test:run

  # Stage 5: Build
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [linting, test, codeql]

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup
        uses: ./.github/actions/setup

      - name: 🏗️ Build application
        run: npm run build

  # Summary Job
  ci-summary:
    name: 📋 CI Summary
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, codeql, build]
    if: always()

    steps:
      - name: 📋 Generate CI Summary
        run: |
          # Determine if this is the default/primary branch
          DEFAULT_BRANCH="${{ github.event.repository.default_branch }}"
          CURRENT_BRANCH="${{ github.ref_name }}"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "## 🏎️ F1 World Champions PR Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pull Request:** #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "**Target Branch:** ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.base_ref }}" == "$DEFAULT_BRANCH" ]]; then
              echo "**Type:** Merging to default branch 🎯" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Type:** Merging to feature branch 🔀" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## 🏎️ F1 World Champions Post-Merge Validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            if [[ "$CURRENT_BRANCH" == "$DEFAULT_BRANCH" ]]; then
              echo "**Type:** Default branch validation 🎯" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Type:** Feature branch validation 🔀" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Stage Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Dependencies | ${{ needs.install-dependencies.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Linting | ${{ needs.linting.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | ${{ needs.test.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security (CodeQL) | ${{ needs.codeql.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏁 Overall Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.install-dependencies.result }}" == "success" && "${{ needs.linting.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.codeql.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "🏆 **All checks passed! PR is ready for merge into ${{ github.base_ref }}!**" >> $GITHUB_STEP_SUMMARY
            else
              echo "🏆 **Post-merge validation successful! Branch ${{ github.ref_name }} is healthy!**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "⚠️ **Some checks failed. Please fix issues before merging into ${{ github.base_ref }}.**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Post-merge validation failed! Branch ${{ github.ref_name }} needs attention!**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Add CodeQL specific information
          if [[ "${{ needs.codeql.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔒 Security Analysis Details" >> $GITHUB_STEP_SUMMARY
            echo "- **Language:** JavaScript/TypeScript" >> $GITHUB_STEP_SUMMARY
            echo "- **Query Suite:** Security and Quality + Security Extended" >> $GITHUB_STEP_SUMMARY
            echo "- **Results:** Available in Security tab → Code scanning alerts" >> $GITHUB_STEP_SUMMARY
          fi
