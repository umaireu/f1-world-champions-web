name: CI Pipeline

permissions:
  contents: read

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  # Stage 1: Install Dependencies
  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup node and install dependencies
        uses: ./.github/actions/setup-node-dependencies

  # Stage 2: Linting
  linting:
    name: Linting
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Run ESLint
        run: npm run lint

  # Stage 3: Testing
  test:
    name: Tests
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    needs: install-dependencies

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Run tests with coverage
        run: npm run test:coverage:ci

      - name: Report Coverage
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
        with:
          vite-config-path: vitest.config.ts

      - name: Extract Coverage Percentage
        if: always()
        id: coverage
        uses: notiz-dev/github-action-json-property@release
        with:
          path: 'coverage/coverage-summary.json'
          prop_path: 'total.lines.pct'

      - name: Overall Coverage Summary
        if: always()
        uses: ./.github/actions/coverage-summary
        with:
          coverage-percentage: ${{ steps.coverage.outputs.prop || '0' }}
          threshold: '70'

  # Stage 4: Security
  security:
    name: Security
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          build-mode: none
          queries: security-extended,security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:javascript-typescript'

      - name: Run npm audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate --output=json > audit-report.json || npm audit --audit-level=moderate

          # Check if audit found vulnerabilities
          if npm audit --audit-level=moderate --dry-run >/dev/null 2>&1; then
            echo "✅ No security vulnerabilities found"
          else
            echo "❌ Security vulnerabilities detected!"
            npm audit --audit-level=moderate
            exit 1
          fi

  # Stage 5: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, security]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: setup-node-dependencies
        uses: ./.github/actions/setup-node-dependencies

      - name: Build application
        run: npm run build

  # Stage 6: Summary
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [install-dependencies, linting, test, security, build]
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate CI Summary
        uses: ./.github/actions/pipeline-summary
        with:
          install-dependencies-result: ${{ needs.install-dependencies.result }}
          linting-result: ${{ needs.linting.result }}
          test-result: ${{ needs.test.result }}
          security-result: ${{ needs.security.result }}
          build-result: ${{ needs.build.result }}
          github-event-name: ${{ github.event_name }}
          github-event-number: ${{ github.event.number }}
          github-base-ref: ${{ github.base_ref }}
          github-ref-name: ${{ github.ref_name }}
          default-branch: ${{ github.event.repository.default_branch }}
